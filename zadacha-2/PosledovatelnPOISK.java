import java.util.Random;

/**
 * Программа для поиска максимального произведения двух различных элементов последовательности,
 * которое кратно 14. Если такого произведения нет, возвращается -1.
 */
public class PosledovatelnPOISK {

    public static void main(String[] args) {
        // Генерируем последовательность из 1000 неотрицательных чисел (0 до 10000)
        int[] sequence = generateSequence(1000);

        // Вызываем метод поиска максимального произведения кратного 14
        int result = findMaxMultipleOf14(sequence);

        // Выводим результат
        System.out.println("Максимальное произведение двух различных элементов, кратное 14: " + result);
    }

    /**
     * Метод для поиска максимального произведения двух различных элементов, кратного 14
     * @param numbers - массив целых чисел
     * @return максимальное произведение кратное 14 или -1 если такого нет
     */
    public static int findMaxMultipleOf14(int[] numbers) {
        // Инициализируем переменную для хранения максимального результата
        // Начальное значение -1 (будет возвращено если подходящее произведение не найдено)
        int maxResult = -1;

        // Перебираем все возможные пары различных элементов массива
        // Внешний цикл идет от первого до предпоследнего элемента
        for (int i = 0; i < numbers.length; i++) {
            // Внутренний цикл идет от следующего элемента до конца массива
            // Это гарантирует что мы рассматриваем только различные элементы (i ≠ j)
            // и избегаем повторения пар (a,b) и (b,a)
            for (int j = i + 1; j < numbers.length; j++) {

                // Вычисляем произведение двух текущих элементов
                int product = numbers[i] * numbers[j];

                // Проверяем условия:
                // 1. Произведение должно делиться на 14 без остатка (кратно 14)
                // 2. Произведение должно быть больше текущего максимального результата
                if (product % 14 == 0 && product > maxResult) {
                    // Если оба условия выполнены, обновляем максимальный результат
                    maxResult = product;

                    // Для отладки можно вывести найденную пару:
                    // System.out.println("Найдена новая максимальная пара: " +
                    //                  numbers[i] + " * " + numbers[j] + " = " + product);
                }
            }
        }

        // Возвращаем результат (либо максимальное найденное значение, либо -1)
        return maxResult;
    }

    /**
     * Метод для генерации последовательности случайных чисел
     * @param size - размер последовательности (1000 элементов по условию)
     * @return массив случайных чисел от 0 до 10000
     */
    public static int[] generateSequence(int size) {
        // Создаем массив заданного размера
        int[] sequence = new int[size];

        // Создаем объект Random для генерации случайных чисел
        Random random = new Random();

        // Заполняем массив случайными числами от 0 до 10000
        for (int i = 0; i < size; i++) {
            // nextInt(10001) генерирует числа от 0 до 10000 включительно
            sequence[i] = random.nextInt(10001);
        }

        // Выводим информацию о сгенерированной последовательности
        System.out.println("Сгенерирована последовательность из " + size + " элементов");
        System.out.println("Диапазон чисел: от 0 до 10000");

        // Для демонстрации выведем первые 10 элементов
        System.out.print("Первые 10 элементов: ");
        for (int i = 0; i < Math.min(10, sequence.length); i++) {
            System.out.print(sequence[i] + " ");
        }
        System.out.println();

        return sequence;
    }

    /**
     * Дополнительный метод для тестирования на конкретном примере
     * Позволяет проверить корректность работы алгоритма
     */
    public static void testWithExample() {
        System.out.println("\n--- ТЕСТИРОВАНИЕ НА КОНКРЕТНОМ ПРИМЕРЕ ---");

        // Создаем тестовую последовательность где заведомо есть подходящие произведения
        int[] testSequence = {14, 28, 7, 42, 100, 56, 2, 84, 35, 98};

        System.out.print("Тестовая последовательность: ");
        for (int num : testSequence) {
            System.out.print(num + " ");
        }
        System.out.println();

        // Вычисляем результат для тестовой последовательности
        int result = findMaxMultipleOf14(testSequence);

        // Выводим ожидаемый результат для проверки
        System.out.println("Ожидаемый максимальный результат: 98 * 84 = 8232");
        System.out.println("Фактический результат: " + result);

        // Проверяем корректность результата
        if (result == 8232) {
            System.out.println("✓ Тест пройден успешно!");
        } else {
            System.out.println("✗ Тест не пройден!");
        }
    }
}
